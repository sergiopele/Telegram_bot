import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is missing in environment variables")

CHOOSING, NAME, PHONE, ADDRESS, MESSAGE = range(5)


MAIN_MENU = ReplyKeyboardMarkup(
    [["–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É"], ["–ó–≤‚Äô—è–∑–æ–∫ –∑ –≤–æ–¥—ñ—î–º", "–£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏"]],
    resize_keyboard=True
)

SOCIAL_LINKS = (
    "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n–ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
    "<a href='https://www.facebook.com/groups/1814614405457006?locale=uk_UA'>Facebook</a>\n"
    "<a href='https://t.me/estransuanor'>Telegram</a>"
)

CONTACT_LINKS = (
    "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–æ–¥—ñ—è:\n"
    "WhatsApp: https://wa.me/380963508202\n"
    "Telegram: https://t.me/Phant0mWAdeR\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +4796801527"
)

PRICING_URL = "https://t.me/estransuanor/13"

# Bot logic
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:")
        return NAME
    elif text == "–ó–≤‚Äô—è–∑–æ–∫ –∑ –≤–æ–¥—ñ—î–º":
        await update.message.reply_text(CONTACT_LINKS)
    elif text == "–£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏":
        await update.message.reply_text(f"–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —É–º–æ–≤–∞–º–∏:\n{PRICING_URL}")
    
    await update.message.reply_text("–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä):")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –¥–µ—Ç–∞–ª—ñ:")
    return MESSAGE

async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['message'] = update.message.text
    user_id = update.effective_user.id

    summary = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
        f"–Ü–º‚Äô—è: {context.user_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context.user_data['message']}"
    )

    await context.bot.send_message(chat_id=user_id, text=summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_MENU)
    return CHOOSING

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook") as resp:
            if resp.status == 200:
                await update.message.reply_text("üîÑ Webhook reset successful. Bot is now polling.")
            else:
                await update.message.reply_text(f"‚ùå Reset failed. Status code: {resp.status}")


app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.add_handler(CommandHandler("reset", reset))

if __name__ == "__main__":
    print("üü¢ Estrans Cargo Bot is running (polling)...")
    app.run_polling()